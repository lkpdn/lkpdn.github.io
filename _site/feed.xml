<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-12-07T20:10:24+09:00</updated><id>http://localhost:4000/</id><title type="html">Tech matters illustrated.</title><subtitle>personal blog.</subtitle><author><name>Koichiro Den</name><email>den@klaipeden.com</email></author><entry><title type="html">_Lockdep, step back to see it wholly._</title><link href="http://localhost:4000/linux/2018/12/05/lockdep-step-back-to-see-it-wholly.html" rel="alternate" type="text/html" title="_Lockdep, step back to see it wholly._" /><published>2018-12-05T21:40:08+09:00</published><updated>2018-12-05T21:40:08+09:00</updated><id>http://localhost:4000/linux/2018/12/05/lockdep-step-back-to-see-it-wholly</id><content type="html" xml:base="http://localhost:4000/linux/2018/12/05/lockdep-step-back-to-see-it-wholly.html">&lt;p&gt;You would often been confronted with various kinds of lockdep notations, or even have to choose an appropriate one to use, when you would have to dive into linux kernel for some reason. This post presents its overview, which I think is rarely illustrated as a whole. Note that I assume you have already read the &lt;a href=&quot;https://www.kernel.org/doc/Documentation/locking/lockdep-design.txt&quot;&gt;kernel doc&lt;/a&gt;. Obviously it’s indispensable material and the core concept is clearly explained.&lt;/p&gt;

&lt;p&gt;The first pic is its usage pattern. You can click it to zoom in:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0002-lockdep-use-overview.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0002-lockdep-use-overview.png&quot; alt=&quot;lockdep use&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and the next one depicts the almost all relating data structure:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0003-lockdep-data-structure.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0003-lockdep-data-structure.png&quot; alt=&quot;lockdep use&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you’ve grasped the whole picture of lockdep, I would like to show you what I think is one of the most interesting reality of how it’s been used, i.e., reality sucks. The scene is where the lockdep has to be fooled by aio.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0006-lockdep-fooled-by-aio.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0006-lockdep-fooled-by-aio.png&quot; alt=&quot;lockdep use&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The point is that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;(A) To protect against freezing when aio_completion, we postpone &lt;a href=&quot;https://elixir.bootlin.com/linux/latest/ident/__sb_end_write&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__sb_end_write&lt;/code&gt;&lt;/a&gt; until &lt;a href=&quot;https://elixir.bootlin.com/linux/latest/ident/aio_complete&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aio_complete&lt;/code&gt;&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;However, that would introduce situation where &lt;a href=&quot;https://elixir.bootlin.com/linux/latest/ident/held_lock&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;held_lock&lt;/code&gt;&lt;/a&gt; exists being unreleased when returning to userspace.
        &lt;ul&gt;
          &lt;li&gt;see: &lt;a href=&quot;https://elixir.bootlin.com/linux/latest/ident/lockdep_sys_exit&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lockdep_sys_exit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(B) So, just to avoid lockdep warning, we negate. Yes, we fool lockdep.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tried in the past to tackle this so as to remove the hack but I couldn’t offer any good solution.&lt;/p&gt;

&lt;p&gt;I hope this post helps someone.&lt;/p&gt;</content><author><name>Koichiro Den</name><email>den@klaipeden.com</email></author><summary type="html">You would often been confronted with various kinds of lockdep notations, or even have to choose an appropriate one to use, when you would have to dive into linux kernel for some reason. This post presents its overview, which I think is rarely illustrated as a whole. Note that I assume you have already read the kernel doc. Obviously it’s indispensable material and the core concept is clearly explained.</summary></entry></feed>