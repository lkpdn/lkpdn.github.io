<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-12-07T21:09:10+09:00</updated><id>http://localhost:4000/</id><title type="html">Tech matters illustrated.</title><subtitle>personal blog.</subtitle><author><name>Koichiro Den</name><email>den@klaipeden.com</email></author><entry><title type="html">_About QEMU Rocker device implementation_</title><link href="http://localhost:4000/linux/2018/12/07/qemu-rocker-device-implementation.html" rel="alternate" type="text/html" title="_About QEMU Rocker device implementation_" /><published>2018-12-07T21:08:23+09:00</published><updated>2018-12-07T21:08:23+09:00</updated><id>http://localhost:4000/linux/2018/12/07/qemu-rocker-device-implementation</id><content type="html" xml:base="http://localhost:4000/linux/2018/12/07/qemu-rocker-device-implementation.html">&lt;p&gt;QEMU rocker device was introduced by Scott Feldman, see the &lt;a href=&quot;http://wiki.netfilter.org/pablo/netdev0.1/papers/Rocker-switchdev-prototyping-vehicle.pdf&quot;&gt;paper&lt;/a&gt; for Netdev 0.1 (&lt;a href=&quot;https://www.netdevconf.org/0.1/sessions/2.html&quot;&gt;https://www.netdevconf.org/0.1/sessions/2.html&lt;/a&gt;), Quote:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Rocker is an emulated network switch platform created to accelerate development of an in­kernel network switch driver model. Rocker has two parts: an Qemu emulation of a 62­port switch chip with PCI host interface and a Linux device driver. The goal is to emulate capabilities of contemporary network switch ASICs used in data­center/enterprise so the community can develop the switch device driver interfaces in the kernel.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Rocker device kernel module is a &lt;a href=&quot;https://www.kernel.org/doc/Documentation/networking/switchdev.txt&quot;&gt;switchdev&lt;/a&gt; driver, and the “World” inside of it implements some characteristic features with corresponding “World” implementation inside of QEMU userland backend device emulation, assuming the possibly forthcoming switch device ASIC. Note: OF-DPA (OpenFlow Data Plane Abstraction) World is the only choice in the upstream at present.&lt;/p&gt;

&lt;p&gt;As a PCI device backend, QEMU userland prepares things in the same way as it does for all the other kinds. Ring structures are for (i). a command ring into which the kernel module enqueues commands, (ii). a event ring into which the QEMU userland enqueues events to notify and (iii). TX/RX rings.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0007-qemu-rocker-ring-seen-from-both-sides.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0007-qemu-rocker-ring-seen-from-both-sides.png&quot; alt=&quot;0007-qemu-rocker-ring-seen-from-both-sides.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and for each ring, QEMU userland allocates MSI-X vectors. How those are set up is:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0008-qemu-rocker-msix-setup-overview.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0008-qemu-rocker-msix-setup-overview.png&quot; alt=&quot;0008-qemu-rocker-msix-setup-overview.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As mentioned above, currently OF-DPA World is the only choice. So let’s see what the switchdev notifications are like in the OF-DPA World’s context. Note that the “operation” in the next figure is what I call it for clarity, not a formal way to call it.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0009-qemu-rocker-switchdev-notifications.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0009-qemu-rocker-switchdev-notifications.png&quot; alt=&quot;0009-qemu-rocker-switchdev-notifications.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;How the admin operation on FDB are propagated to switchdev and how the FDB the device has learned are notified upwards are now clear, isn’t it?
Lastly I offer you the whole picture of how the OF-DPA processing sometimes bypasses the upward delivery, sometimes not, with the entire callgraph.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0010-qemu-rocker-ofdpa-processing-overview.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0010-qemu-rocker-ofdpa-processing-overview.png&quot; alt=&quot;0010-qemu-rocker-ofdpa-processing-overview.png&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;</content><author><name>Koichiro Den</name><email>den@klaipeden.com</email></author><summary type="html">QEMU rocker device was introduced by Scott Feldman, see the paper for Netdev 0.1 (https://www.netdevconf.org/0.1/sessions/2.html), Quote: Rocker is an emulated network switch platform created to accelerate development of an in­kernel network switch driver model. Rocker has two parts: an Qemu emulation of a 62­port switch chip with PCI host interface and a Linux device driver. The goal is to emulate capabilities of contemporary network switch ASICs used in data­center/enterprise so the community can develop the switch device driver interfaces in the kernel.</summary></entry><entry><title type="html">_Lockdep, step back to see it wholly._</title><link href="http://localhost:4000/linux/2018/12/06/lockdep-step-back-to-see-it-wholly.html" rel="alternate" type="text/html" title="_Lockdep, step back to see it wholly._" /><published>2018-12-06T21:41:33+09:00</published><updated>2018-12-06T21:41:33+09:00</updated><id>http://localhost:4000/linux/2018/12/06/lockdep-step-back-to-see-it-wholly</id><content type="html" xml:base="http://localhost:4000/linux/2018/12/06/lockdep-step-back-to-see-it-wholly.html">&lt;p&gt;You would often been confronted with various kinds of lockdep notations, or even have to choose an appropriate one to use, when you would have to dive into linux kernel for some reason. This post presents its overview, which I think is rarely illustrated as a whole. Note that I assume you have already read the &lt;a href=&quot;https://www.kernel.org/doc/Documentation/locking/lockdep-design.txt&quot;&gt;kernel doc&lt;/a&gt;. Obviously it’s indispensable material and the core concept is clearly explained.&lt;/p&gt;

&lt;p&gt;The first pic is its usage pattern. You can click it to zoom in:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0002-lockdep-use-overview.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0002-lockdep-use-overview.png&quot; alt=&quot;lockdep use&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and the next one depicts the almost all relating data structure:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0003-lockdep-data-structure.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0003-lockdep-data-structure.png&quot; alt=&quot;lockdep use&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now that you’ve grasped the whole picture of lockdep, I would like to show you what I think is one of the most interesting reality of how it’s been used, i.e., reality sucks. The scene is where the lockdep has to be fooled by aio.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0006-lockdep-fooled-by-aio.png&quot;&gt;&lt;img src=&quot;https://raw.githubusercontent.com/lkpdn/images/master/imgs/0006-lockdep-fooled-by-aio.png&quot; alt=&quot;lockdep use&quot; class=&quot;img-responsive&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The point is that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;(A) To protect against freezing when aio_completion, we postpone &lt;a href=&quot;https://elixir.bootlin.com/linux/latest/ident/__sb_end_write&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__sb_end_write&lt;/code&gt;&lt;/a&gt; until &lt;a href=&quot;https://elixir.bootlin.com/linux/latest/ident/aio_complete&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aio_complete&lt;/code&gt;&lt;/a&gt;.
    &lt;ul&gt;
      &lt;li&gt;However, that would introduce situation where &lt;a href=&quot;https://elixir.bootlin.com/linux/latest/ident/held_lock&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;held_lock&lt;/code&gt;&lt;/a&gt; exists being unreleased when returning to userspace.
        &lt;ul&gt;
          &lt;li&gt;see: &lt;a href=&quot;https://elixir.bootlin.com/linux/latest/ident/lockdep_sys_exit&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lockdep_sys_exit&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;(B) So, just to avoid lockdep warning, we negate. Yes, we fool lockdep.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I tried in the past to tackle this so as to remove the hack but I couldn’t offer any good solution.&lt;/p&gt;

&lt;p&gt;I hope this post helps someone.&lt;/p&gt;</content><author><name>Koichiro Den</name><email>den@klaipeden.com</email></author><summary type="html">You would often been confronted with various kinds of lockdep notations, or even have to choose an appropriate one to use, when you would have to dive into linux kernel for some reason. This post presents its overview, which I think is rarely illustrated as a whole. Note that I assume you have already read the kernel doc. Obviously it’s indispensable material and the core concept is clearly explained.</summary></entry></feed>